// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/Mixer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.MixerControl)
pub struct MixerControl {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.MixerControl.steamId)
    pub steamId: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.MixerControl.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.MixerControl.control)
    pub control: ::protobuf::EnumOrUnknown<mixer_control::Control>,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.MixerControl.tracks)
    pub tracks: ::std::vec::Vec<super::Track::Track>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.MixerControl.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MixerControl {
    fn default() -> &'a MixerControl {
        <MixerControl as ::protobuf::Message>::default_instance()
    }
}

impl MixerControl {
    pub fn new() -> MixerControl {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "steamId",
            |m: &MixerControl| { &m.steamId },
            |m: &mut MixerControl| { &mut m.steamId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &MixerControl| { &m.token },
            |m: &mut MixerControl| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control",
            |m: &MixerControl| { &m.control },
            |m: &mut MixerControl| { &mut m.control },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tracks",
            |m: &MixerControl| { &m.tracks },
            |m: &mut MixerControl| { &mut m.tracks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MixerControl>(
            "MixerControl",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MixerControl {
    const NAME: &'static str = "MixerControl";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.steamId = is.read_string()?;
                },
                18 => {
                    self.token = is.read_string()?;
                },
                24 => {
                    self.control = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.tracks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.steamId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.steamId);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        if self.control != ::protobuf::EnumOrUnknown::new(mixer_control::Control::DATA) {
            my_size += ::protobuf::rt::int32_size(3, self.control.value());
        }
        for value in &self.tracks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.steamId.is_empty() {
            os.write_string(1, &self.steamId)?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        if self.control != ::protobuf::EnumOrUnknown::new(mixer_control::Control::DATA) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.control))?;
        }
        for v in &self.tracks {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MixerControl {
        MixerControl::new()
    }

    fn clear(&mut self) {
        self.steamId.clear();
        self.token.clear();
        self.control = ::protobuf::EnumOrUnknown::new(mixer_control::Control::DATA);
        self.tracks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MixerControl {
        static instance: MixerControl = MixerControl {
            steamId: ::std::string::String::new(),
            token: ::std::string::String::new(),
            control: ::protobuf::EnumOrUnknown::from_i32(0),
            tracks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MixerControl {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MixerControl").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MixerControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MixerControl {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MixerControl`
pub mod mixer_control {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:zensayyy.fm.proto.MixerControl.Control)
    pub enum Control {
        // @@protoc_insertion_point(enum_value:zensayyy.fm.proto.MixerControl.Control.DATA)
        DATA = 0,
    }

    impl ::protobuf::Enum for Control {
        const NAME: &'static str = "Control";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Control> {
            match value {
                0 => ::std::option::Option::Some(Control::DATA),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Control] = &[
            Control::DATA,
        ];
    }

    impl ::protobuf::EnumFull for Control {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MixerControl.Control").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Control {
        fn default() -> Self {
            Control::DATA
        }
    }

    impl Control {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Control>("MixerControl.Control")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.MixerProtocol)
pub struct MixerProtocol {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.MixerProtocol.time)
    pub time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // message oneof groups
    pub msg: ::std::option::Option<mixer_protocol::Msg>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.MixerProtocol.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MixerProtocol {
    fn default() -> &'a MixerProtocol {
        <MixerProtocol as ::protobuf::Message>::default_instance()
    }
}

impl MixerProtocol {
    pub fn new() -> MixerProtocol {
        ::std::default::Default::default()
    }

    // .zensayyy.fm.proto.MixerControl control = 2;

    pub fn control(&self) -> &MixerControl {
        match self.msg {
            ::std::option::Option::Some(mixer_protocol::Msg::Control(ref v)) => v,
            _ => <MixerControl as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_control(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_control(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(mixer_protocol::Msg::Control(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: MixerControl) {
        self.msg = ::std::option::Option::Some(mixer_protocol::Msg::Control(v))
    }

    // Mutable pointer to the field.
    pub fn mut_control(&mut self) -> &mut MixerControl {
        if let ::std::option::Option::Some(mixer_protocol::Msg::Control(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(mixer_protocol::Msg::Control(MixerControl::new()));
        }
        match self.msg {
            ::std::option::Option::Some(mixer_protocol::Msg::Control(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_control(&mut self) -> MixerControl {
        if self.has_control() {
            match self.msg.take() {
                ::std::option::Option::Some(mixer_protocol::Msg::Control(v)) => v,
                _ => panic!(),
            }
        } else {
            MixerControl::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "time",
            |m: &MixerProtocol| { &m.time },
            |m: &mut MixerProtocol| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MixerControl>(
            "control",
            MixerProtocol::has_control,
            MixerProtocol::control,
            MixerProtocol::mut_control,
            MixerProtocol::set_control,
        ));
        oneofs.push(mixer_protocol::Msg::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MixerProtocol>(
            "MixerProtocol",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MixerProtocol {
    const NAME: &'static str = "MixerProtocol";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                18 => {
                    self.msg = ::std::option::Option::Some(mixer_protocol::Msg::Control(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &mixer_protocol::Msg::Control(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &mixer_protocol::Msg::Control(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MixerProtocol {
        MixerProtocol::new()
    }

    fn clear(&mut self) {
        self.time.clear();
        self.msg = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MixerProtocol {
        static instance: MixerProtocol = MixerProtocol {
            time: ::protobuf::MessageField::none(),
            msg: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MixerProtocol {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MixerProtocol").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MixerProtocol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MixerProtocol {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MixerProtocol`
pub mod mixer_protocol {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:zensayyy.fm.proto.MixerProtocol.msg)
    pub enum Msg {
        // @@protoc_insertion_point(oneof_field:zensayyy.fm.proto.MixerProtocol.control)
        Control(super::MixerControl),
    }

    impl ::protobuf::Oneof for Msg {
    }

    impl ::protobuf::OneofFull for Msg {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::MixerProtocol as ::protobuf::MessageFull>::descriptor().oneof_by_name("msg").unwrap()).clone()
        }
    }

    impl Msg {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Msg>("msg")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14protocol/Mixer.proto\x12\x11zensayyy.fm.proto\x1a\x14protocol/Trac\
    k.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc8\x01\n\x0cMixerContr\
    ol\x12\x18\n\x07steamId\x18\x01\x20\x01(\tR\x07steamId\x12\x14\n\x05toke\
    n\x18\x02\x20\x01(\tR\x05token\x12A\n\x07control\x18\x03\x20\x01(\x0e2'.\
    zensayyy.fm.proto.MixerControl.ControlR\x07control\x120\n\x06tracks\x18\
    \x04\x20\x03(\x0b2\x18.zensayyy.fm.proto.TrackR\x06tracks\"\x13\n\x07Con\
    trol\x12\x08\n\x04DATA\x10\0\"\x83\x01\n\rMixerProtocol\x12.\n\x04time\
    \x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x04time\x12;\n\x07\
    control\x18\x02\x20\x01(\x0b2\x1f.zensayyy.fm.proto.MixerControlH\0R\x07\
    controlB\x05\n\x03msgJ\xa1\x04\n\x06\x12\x04\0\0\x17\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1a\n\t\n\x02\x03\0\x12\
    \x03\x02\0\x1e\n\t\n\x02\x03\x01\x12\x03\x03\0)\n\n\n\x02\x04\0\x12\x04\
    \x05\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x14\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x06\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\t\x10\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x06\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x02\x13\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x07\t\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x07\x11\
    \x12\n\x0c\n\x04\x04\0\x04\0\x12\x04\t\x02\x0b\x03\n\x0c\n\x05\x04\0\x04\
    \0\x01\x12\x03\t\x07\x0e\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\n\x04\r\n\
    \x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\n\x04\x08\n\x0e\n\x07\x04\0\x04\
    \0\x02\0\x02\x12\x03\n\x0b\x0c\n\x0b\n\x04\x04\0\x02\x02\x12\x03\r\x02\
    \x16\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\r\x02\t\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\r\n\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\r\x14\x15\
    \n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0e\x02\x1c\n\x0c\n\x05\x04\0\x02\x03\
    \x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x0e\x0b\x10\
    \n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0e\x11\x17\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x0e\x1a\x1b\n\n\n\x02\x04\x01\x12\x04\x11\0\x17\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x11\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x12\x02%\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x12\x02\x1b\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x12\x1c\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x12#$\n\x0c\n\x04\x04\x01\x08\0\x12\x04\x13\x02\x15\x03\n\x0c\n\x05\
    \x04\x01\x08\0\x01\x12\x03\x13\x08\x0b\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\x14\x04\x1d\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x14\x04\x10\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x14\x11\x18\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x14\x1b\x1cb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::Track::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(MixerControl::generated_message_descriptor_data());
            messages.push(MixerProtocol::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(mixer_control::Control::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
