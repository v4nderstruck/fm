// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/Fm.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

/// / Control Messages received by the Client
/// / Todo: Control Messages for Synchronize Streams
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.FmControl)
pub struct FmControl {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.FmControl.control)
    pub control: ::protobuf::EnumOrUnknown<fm_control::Control>,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.FmControl.tracks)
    pub tracks: ::std::vec::Vec<super::Track::Track>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.FmControl.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FmControl {
    fn default() -> &'a FmControl {
        <FmControl as ::protobuf::Message>::default_instance()
    }
}

impl FmControl {
    pub fn new() -> FmControl {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "control",
            |m: &FmControl| { &m.control },
            |m: &mut FmControl| { &mut m.control },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tracks",
            |m: &FmControl| { &m.tracks },
            |m: &mut FmControl| { &mut m.tracks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FmControl>(
            "FmControl",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FmControl {
    const NAME: &'static str = "FmControl";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.control = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.tracks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.control != ::protobuf::EnumOrUnknown::new(fm_control::Control::SYNC_REQ) {
            my_size += ::protobuf::rt::int32_size(1, self.control.value());
        }
        for value in &self.tracks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.control != ::protobuf::EnumOrUnknown::new(fm_control::Control::SYNC_REQ) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.control))?;
        }
        for v in &self.tracks {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FmControl {
        FmControl::new()
    }

    fn clear(&mut self) {
        self.control = ::protobuf::EnumOrUnknown::new(fm_control::Control::SYNC_REQ);
        self.tracks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FmControl {
        static instance: FmControl = FmControl {
            control: ::protobuf::EnumOrUnknown::from_i32(0),
            tracks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FmControl {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FmControl").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FmControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FmControl {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FmControl`
pub mod fm_control {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:zensayyy.fm.proto.FmControl.Control)
    pub enum Control {
        // @@protoc_insertion_point(enum_value:zensayyy.fm.proto.FmControl.Control.SYNC_REQ)
        SYNC_REQ = 0,
        // @@protoc_insertion_point(enum_value:zensayyy.fm.proto.FmControl.Control.DATA)
        DATA = 1,
    }

    impl ::protobuf::Enum for Control {
        const NAME: &'static str = "Control";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Control> {
            match value {
                0 => ::std::option::Option::Some(Control::SYNC_REQ),
                1 => ::std::option::Option::Some(Control::DATA),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Control] = &[
            Control::SYNC_REQ,
            Control::DATA,
        ];
    }

    impl ::protobuf::EnumFull for Control {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("FmControl.Control").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Control {
        fn default() -> Self {
            Control::SYNC_REQ
        }
    }

    impl Control {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Control>("FmControl.Control")
        }
    }
}

/// / Join Message send by the clients
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.FmJoin)
pub struct FmJoin {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.FmJoin.streamId)
    pub streamId: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.FmJoin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FmJoin {
    fn default() -> &'a FmJoin {
        <FmJoin as ::protobuf::Message>::default_instance()
    }
}

impl FmJoin {
    pub fn new() -> FmJoin {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "streamId",
            |m: &FmJoin| { &m.streamId },
            |m: &mut FmJoin| { &mut m.streamId },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FmJoin>(
            "FmJoin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FmJoin {
    const NAME: &'static str = "FmJoin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.streamId = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.streamId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.streamId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.streamId.is_empty() {
            os.write_string(1, &self.streamId)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FmJoin {
        FmJoin::new()
    }

    fn clear(&mut self) {
        self.streamId.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FmJoin {
        static instance: FmJoin = FmJoin {
            streamId: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FmJoin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FmJoin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FmJoin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FmJoin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// / FmProtocol Message
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.FmProtocol)
pub struct FmProtocol {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.FmProtocol.time)
    pub time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // message oneof groups
    pub msg: ::std::option::Option<fm_protocol::Msg>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.FmProtocol.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FmProtocol {
    fn default() -> &'a FmProtocol {
        <FmProtocol as ::protobuf::Message>::default_instance()
    }
}

impl FmProtocol {
    pub fn new() -> FmProtocol {
        ::std::default::Default::default()
    }

    // .zensayyy.fm.proto.FmJoin join = 2;

    pub fn join(&self) -> &FmJoin {
        match self.msg {
            ::std::option::Option::Some(fm_protocol::Msg::Join(ref v)) => v,
            _ => <FmJoin as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_join(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_join(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(fm_protocol::Msg::Join(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_join(&mut self, v: FmJoin) {
        self.msg = ::std::option::Option::Some(fm_protocol::Msg::Join(v))
    }

    // Mutable pointer to the field.
    pub fn mut_join(&mut self) -> &mut FmJoin {
        if let ::std::option::Option::Some(fm_protocol::Msg::Join(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(fm_protocol::Msg::Join(FmJoin::new()));
        }
        match self.msg {
            ::std::option::Option::Some(fm_protocol::Msg::Join(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_join(&mut self) -> FmJoin {
        if self.has_join() {
            match self.msg.take() {
                ::std::option::Option::Some(fm_protocol::Msg::Join(v)) => v,
                _ => panic!(),
            }
        } else {
            FmJoin::new()
        }
    }

    // .zensayyy.fm.proto.FmControl control = 3;

    pub fn control(&self) -> &FmControl {
        match self.msg {
            ::std::option::Option::Some(fm_protocol::Msg::Control(ref v)) => v,
            _ => <FmControl as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_control(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_control(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(fm_protocol::Msg::Control(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_control(&mut self, v: FmControl) {
        self.msg = ::std::option::Option::Some(fm_protocol::Msg::Control(v))
    }

    // Mutable pointer to the field.
    pub fn mut_control(&mut self) -> &mut FmControl {
        if let ::std::option::Option::Some(fm_protocol::Msg::Control(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(fm_protocol::Msg::Control(FmControl::new()));
        }
        match self.msg {
            ::std::option::Option::Some(fm_protocol::Msg::Control(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_control(&mut self) -> FmControl {
        if self.has_control() {
            match self.msg.take() {
                ::std::option::Option::Some(fm_protocol::Msg::Control(v)) => v,
                _ => panic!(),
            }
        } else {
            FmControl::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "time",
            |m: &FmProtocol| { &m.time },
            |m: &mut FmProtocol| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, FmJoin>(
            "join",
            FmProtocol::has_join,
            FmProtocol::join,
            FmProtocol::mut_join,
            FmProtocol::set_join,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, FmControl>(
            "control",
            FmProtocol::has_control,
            FmProtocol::control,
            FmProtocol::mut_control,
            FmProtocol::set_control,
        ));
        oneofs.push(fm_protocol::Msg::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FmProtocol>(
            "FmProtocol",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FmProtocol {
    const NAME: &'static str = "FmProtocol";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                18 => {
                    self.msg = ::std::option::Option::Some(fm_protocol::Msg::Join(is.read_message()?));
                },
                26 => {
                    self.msg = ::std::option::Option::Some(fm_protocol::Msg::Control(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &fm_protocol::Msg::Join(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &fm_protocol::Msg::Control(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &fm_protocol::Msg::Join(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &fm_protocol::Msg::Control(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FmProtocol {
        FmProtocol::new()
    }

    fn clear(&mut self) {
        self.time.clear();
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FmProtocol {
        static instance: FmProtocol = FmProtocol {
            time: ::protobuf::MessageField::none(),
            msg: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FmProtocol {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FmProtocol").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FmProtocol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FmProtocol {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FmProtocol`
pub mod fm_protocol {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:zensayyy.fm.proto.FmProtocol.msg)
    pub enum Msg {
        // @@protoc_insertion_point(oneof_field:zensayyy.fm.proto.FmProtocol.join)
        Join(super::FmJoin),
        // @@protoc_insertion_point(oneof_field:zensayyy.fm.proto.FmProtocol.control)
        Control(super::FmControl),
    }

    impl ::protobuf::Oneof for Msg {
    }

    impl ::protobuf::OneofFull for Msg {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FmProtocol as ::protobuf::MessageFull>::descriptor().oneof_by_name("msg").unwrap()).clone()
        }
    }

    impl Msg {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Msg>("msg")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11protocol/Fm.proto\x12\x11zensayyy.fm.proto\x1a\x1fgoogle/protobuf/\
    timestamp.proto\x1a\x14protocol/Track.proto\"\xa0\x01\n\tFmControl\x12>\
    \n\x07control\x18\x01\x20\x01(\x0e2$.zensayyy.fm.proto.FmControl.Control\
    R\x07control\x120\n\x06tracks\x18\x02\x20\x03(\x0b2\x18.zensayyy.fm.prot\
    o.TrackR\x06tracks\"!\n\x07Control\x12\x0c\n\x08SYNC_REQ\x10\0\x12\x08\n\
    \x04DATA\x10\x01\"$\n\x06FmJoin\x12\x1a\n\x08streamId\x18\x01\x20\x01(\t\
    R\x08streamId\"\xae\x01\n\nFmProtocol\x12.\n\x04time\x18\x01\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\x04time\x12/\n\x04join\x18\x02\x20\
    \x01(\x0b2\x19.zensayyy.fm.proto.FmJoinH\0R\x04join\x128\n\x07control\
    \x18\x03\x20\x01(\x0b2\x1c.zensayyy.fm.proto.FmControlH\0R\x07controlB\
    \x05\n\x03msgJ\x98\x06\n\x06\x12\x04\0\0\x1c\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x1a\n\t\n\x02\x03\0\x12\x03\x02\0\
    )\n\t\n\x02\x03\x01\x12\x03\x03\0\x1e\ng\n\x02\x04\0\x12\x04\x07\0\x0e\
    \x01\x1a[/\x20Control\x20Messages\x20received\x20by\x20the\x20Client\n/\
    \x20Todo:\x20Control\x20Messages\x20for\x20Synchronize\x20Streams\n\n\n\
    \n\x03\x04\0\x01\x12\x03\x07\x08\x11\n\x0c\n\x04\x04\0\x04\0\x12\x04\x08\
    \x02\x0b\x03\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x08\x07\x0e\n$\n\x06\
    \x04\0\x04\0\x02\0\x12\x03\t\x04\x11\"\x15\x20client\x20request\x20DATA\
    \n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\t\x04\x0c\n\x0e\n\x07\x04\0\
    \x04\0\x02\0\x02\x12\x03\t\x0f\x10\n\r\n\x06\x04\0\x04\0\x02\x01\x12\x03\
    \n\x04\r\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\n\x04\x08\n\x0e\n\
    \x07\x04\0\x04\0\x02\x01\x02\x12\x03\n\x0b\x0c\n\x0b\n\x04\x04\0\x02\0\
    \x12\x03\x0c\x02\x16\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0c\x02\t\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x0c\n\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x0c\x14\x15\n\x0b\n\x04\x04\0\x02\x01\x12\x03\r\x02\x1c\n\x0c\n\x05\
    \x04\0\x02\x01\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\
    \r\x0b\x10\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\r\x11\x17\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\r\x1a\x1b\n/\n\x02\x04\x01\x12\x04\x11\0\x13\
    \x01\x1a#/\x20Join\x20Message\x20send\x20by\x20the\x20clients\n\n\n\n\
    \x03\x04\x01\x01\x12\x03\x11\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x12\x02\x16\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x12\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x12\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x12\x14\x15\n!\n\x02\x04\x02\x12\x04\x16\0\x1c\x01\x1a\x15/\x20\
    FmProtocol\x20Message\n\n\n\n\x03\x04\x02\x01\x12\x03\x16\x08\x12\n\x0b\
    \n\x04\x04\x02\x02\0\x12\x03\x17\x02%\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x03\x17\x02\x1b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x17\x1c\x20\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03\x17#$\n\x0c\n\x04\x04\x02\x08\0\x12\x04\
    \x18\x02\x1b\x03\n\x0c\n\x05\x04\x02\x08\0\x01\x12\x03\x18\x08\x0b\n\x0b\
    \n\x04\x04\x02\x02\x01\x12\x03\x19\x04\x14\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03\x19\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x19\x0b\
    \x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x19\x12\x13\n\x0b\n\x04\x04\
    \x02\x02\x02\x12\x03\x1a\x04\x1a\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\
    \x1a\x04\r\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1a\x0e\x15\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03\x1a\x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::Track::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(FmControl::generated_message_descriptor_data());
            messages.push(FmJoin::generated_message_descriptor_data());
            messages.push(FmProtocol::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(fm_control::Control::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
