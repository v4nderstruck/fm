// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/Control.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.StreamT)
pub struct StreamT {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamT.videoId)
    pub videoId: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamT.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamT.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamT.action)
    pub action: ::protobuf::EnumOrUnknown<super::Stream::StreamAction>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.StreamT.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamT {
    fn default() -> &'a StreamT {
        <StreamT as ::protobuf::Message>::default_instance()
    }
}

impl StreamT {
    pub fn new() -> StreamT {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "videoId",
            |m: &StreamT| { &m.videoId },
            |m: &mut StreamT| { &mut m.videoId },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &StreamT| { &m.title },
            |m: &mut StreamT| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &StreamT| { &m.description },
            |m: &mut StreamT| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &StreamT| { &m.action },
            |m: &mut StreamT| { &mut m.action },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StreamT>(
            "StreamT",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StreamT {
    const NAME: &'static str = "StreamT";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.videoId = is.read_string()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                32 => {
                    self.action = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.videoId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.videoId);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if self.action != ::protobuf::EnumOrUnknown::new(super::Stream::StreamAction::ADD) {
            my_size += ::protobuf::rt::int32_size(4, self.action.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.videoId.is_empty() {
            os.write_string(1, &self.videoId)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if self.action != ::protobuf::EnumOrUnknown::new(super::Stream::StreamAction::ADD) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.action))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamT {
        StreamT::new()
    }

    fn clear(&mut self) {
        self.videoId.clear();
        self.title.clear();
        self.description.clear();
        self.action = ::protobuf::EnumOrUnknown::new(super::Stream::StreamAction::ADD);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamT {
        static instance: StreamT = StreamT {
            videoId: ::std::string::String::new(),
            title: ::std::string::String::new(),
            description: ::std::string::String::new(),
            action: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StreamT {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamT").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamT {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.ControlMessage)
pub struct ControlMessage {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.ControlMessage.id)
    pub id: ::protobuf::MessageField<super::Stream::StreamJoin>,
    // message oneof groups
    pub message: ::std::option::Option<control_message::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.ControlMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ControlMessage {
    fn default() -> &'a ControlMessage {
        <ControlMessage as ::protobuf::Message>::default_instance()
    }
}

impl ControlMessage {
    pub fn new() -> ControlMessage {
        ::std::default::Default::default()
    }

    // .zensayyy.fm.proto.StreamT stream = 2;

    pub fn stream(&self) -> &StreamT {
        match self.message {
            ::std::option::Option::Some(control_message::Message::Stream(ref v)) => v,
            _ => <StreamT as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_stream(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_stream(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(control_message::Message::Stream(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stream(&mut self, v: StreamT) {
        self.message = ::std::option::Option::Some(control_message::Message::Stream(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stream(&mut self) -> &mut StreamT {
        if let ::std::option::Option::Some(control_message::Message::Stream(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(control_message::Message::Stream(StreamT::new()));
        }
        match self.message {
            ::std::option::Option::Some(control_message::Message::Stream(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stream(&mut self) -> StreamT {
        if self.has_stream() {
            match self.message.take() {
                ::std::option::Option::Some(control_message::Message::Stream(v)) => v,
                _ => panic!(),
            }
        } else {
            StreamT::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Stream::StreamJoin>(
            "id",
            |m: &ControlMessage| { &m.id },
            |m: &mut ControlMessage| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StreamT>(
            "stream",
            ControlMessage::has_stream,
            ControlMessage::stream,
            ControlMessage::mut_stream,
            ControlMessage::set_stream,
        ));
        oneofs.push(control_message::Message::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ControlMessage>(
            "ControlMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ControlMessage {
    const NAME: &'static str = "ControlMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                18 => {
                    self.message = ::std::option::Option::Some(control_message::Message::Stream(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &control_message::Message::Stream(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &control_message::Message::Stream(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ControlMessage {
        ControlMessage::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ControlMessage {
        static instance: ControlMessage = ControlMessage {
            id: ::protobuf::MessageField::none(),
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ControlMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ControlMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ControlMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControlMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ControlMessage`
pub mod control_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:zensayyy.fm.proto.ControlMessage.message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:zensayyy.fm.proto.ControlMessage.stream)
        Stream(super::StreamT),
    }

    impl ::protobuf::Oneof for Message {
    }

    impl ::protobuf::OneofFull for Message {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::ControlMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Message>("message")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16protocol/Control.proto\x12\x11zensayyy.fm.proto\x1a\x15protocol/St\
    ream.proto\"\x94\x01\n\x07StreamT\x12\x18\n\x07videoId\x18\x01\x20\x01(\
    \tR\x07videoId\x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05title\x12\x20\n\
    \x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x127\n\x06action\x18\
    \x04\x20\x01(\x0e2\x1f.zensayyy.fm.proto.StreamActionR\x06action\"\x80\
    \x01\n\x0eControlMessage\x12-\n\x02id\x18\x01\x20\x01(\x0b2\x1d.zensayyy\
    .fm.proto.StreamJoinR\x02id\x124\n\x06stream\x18\x02\x20\x01(\x0b2\x1a.z\
    ensayyy.fm.proto.StreamTH\0R\x06streamB\t\n\x07messageJ\xbd\x03\n\x06\
    \x12\x04\0\0\x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x01\0\x1a\n\t\n\x02\x03\0\x12\x03\x02\0\x1f\n\n\n\x02\x04\0\x12\x04\
    \x04\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0f\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x05\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\t\x10\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x05\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x13\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x06\t\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x11\
    \x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x02\x19\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\t\
    \x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\x17\x18\n\x0b\n\x04\x04\0\
    \x02\x03\x12\x03\x08\x02\x1a\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x08\
    \x02\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x08\x0f\x15\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x08\x18\x19\n\n\n\x02\x04\x01\x12\x04\x0b\0\
    \x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0b\x08\x16\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x0c\x02\x14\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0c\x02\
    \x0c\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\r\x0f\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x0c\x12\x13\n\x0c\n\x04\x04\x01\x08\0\x12\x04\r\x02\
    \x0f\x03\n\x0c\n\x05\x04\x01\x08\0\x01\x12\x03\r\x08\x0f\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x0e\x04\x17\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\
    \x0e\x04\x0b\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\x0c\x12\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03\x0e\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::Stream::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(StreamT::generated_message_descriptor_data());
            messages.push(ControlMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
