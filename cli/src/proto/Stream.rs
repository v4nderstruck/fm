// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protocol/Stream.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.ClipMetadata)
pub struct ClipMetadata {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.ClipMetadata.src)
    pub src: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.ClipMetadata.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.ClipMetadata.description)
    pub description: ::std::string::String,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.ClipMetadata.thumbnail)
    pub thumbnail: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.ClipMetadata.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClipMetadata {
    fn default() -> &'a ClipMetadata {
        <ClipMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ClipMetadata {
    pub fn new() -> ClipMetadata {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src",
            |m: &ClipMetadata| { &m.src },
            |m: &mut ClipMetadata| { &mut m.src },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &ClipMetadata| { &m.title },
            |m: &mut ClipMetadata| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &ClipMetadata| { &m.description },
            |m: &mut ClipMetadata| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thumbnail",
            |m: &ClipMetadata| { &m.thumbnail },
            |m: &mut ClipMetadata| { &mut m.thumbnail },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClipMetadata>(
            "ClipMetadata",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClipMetadata {
    const NAME: &'static str = "ClipMetadata";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.src = is.read_string()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                26 => {
                    self.description = is.read_string()?;
                },
                34 => {
                    self.thumbnail = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.src.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.src);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.thumbnail.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.thumbnail);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.src.is_empty() {
            os.write_string(1, &self.src)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.thumbnail.is_empty() {
            os.write_string(4, &self.thumbnail)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClipMetadata {
        ClipMetadata::new()
    }

    fn clear(&mut self) {
        self.src.clear();
        self.title.clear();
        self.description.clear();
        self.thumbnail.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClipMetadata {
        static instance: ClipMetadata = ClipMetadata {
            src: ::std::string::String::new(),
            title: ::std::string::String::new(),
            description: ::std::string::String::new(),
            thumbnail: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClipMetadata {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClipMetadata").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClipMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClipMetadata {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.StreamUpdate)
pub struct StreamUpdate {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamUpdate.upcoming)
    pub upcoming: ::protobuf::MessageField<ClipMetadata>,
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamUpdate.time)
    pub time: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.StreamUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamUpdate {
    fn default() -> &'a StreamUpdate {
        <StreamUpdate as ::protobuf::Message>::default_instance()
    }
}

impl StreamUpdate {
    pub fn new() -> StreamUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ClipMetadata>(
            "upcoming",
            |m: &StreamUpdate| { &m.upcoming },
            |m: &mut StreamUpdate| { &mut m.upcoming },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "time",
            |m: &StreamUpdate| { &m.time },
            |m: &mut StreamUpdate| { &mut m.time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StreamUpdate>(
            "StreamUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StreamUpdate {
    const NAME: &'static str = "StreamUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.upcoming)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.time)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.upcoming.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.upcoming.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.time.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamUpdate {
        StreamUpdate::new()
    }

    fn clear(&mut self) {
        self.upcoming.clear();
        self.time.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamUpdate {
        static instance: StreamUpdate = StreamUpdate {
            upcoming: ::protobuf::MessageField::none(),
            time: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StreamUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.StreamUpdateSummary)
pub struct StreamUpdateSummary {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamUpdateSummary.updates)
    pub updates: ::std::vec::Vec<StreamUpdate>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.StreamUpdateSummary.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamUpdateSummary {
    fn default() -> &'a StreamUpdateSummary {
        <StreamUpdateSummary as ::protobuf::Message>::default_instance()
    }
}

impl StreamUpdateSummary {
    pub fn new() -> StreamUpdateSummary {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "updates",
            |m: &StreamUpdateSummary| { &m.updates },
            |m: &mut StreamUpdateSummary| { &mut m.updates },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StreamUpdateSummary>(
            "StreamUpdateSummary",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StreamUpdateSummary {
    const NAME: &'static str = "StreamUpdateSummary";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.updates.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.updates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.updates {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamUpdateSummary {
        StreamUpdateSummary::new()
    }

    fn clear(&mut self) {
        self.updates.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamUpdateSummary {
        static instance: StreamUpdateSummary = StreamUpdateSummary {
            updates: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StreamUpdateSummary {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamUpdateSummary").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamUpdateSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamUpdateSummary {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  sent by the browser / app to the server to join a stream (receive updates)
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.StreamJoin)
pub struct StreamJoin {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamJoin.streamId)
    pub streamId: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.StreamJoin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamJoin {
    fn default() -> &'a StreamJoin {
        <StreamJoin as ::protobuf::Message>::default_instance()
    }
}

impl StreamJoin {
    pub fn new() -> StreamJoin {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "streamId",
            |m: &StreamJoin| { &m.streamId },
            |m: &mut StreamJoin| { &mut m.streamId },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StreamJoin>(
            "StreamJoin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StreamJoin {
    const NAME: &'static str = "StreamJoin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.streamId = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.streamId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.streamId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.streamId.is_empty() {
            os.write_string(1, &self.streamId)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamJoin {
        StreamJoin::new()
    }

    fn clear(&mut self) {
        self.streamId.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamJoin {
        static instance: StreamJoin = StreamJoin {
            streamId: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StreamJoin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamJoin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamJoin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamJoin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:zensayyy.fm.proto.StreamMessage)
pub struct StreamMessage {
    // message fields
    // @@protoc_insertion_point(field:zensayyy.fm.proto.StreamMessage.action)
    pub action: ::protobuf::EnumOrUnknown<StreamAction>,
    // message oneof groups
    pub message: ::std::option::Option<stream_message::Message>,
    // special fields
    // @@protoc_insertion_point(special_field:zensayyy.fm.proto.StreamMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StreamMessage {
    fn default() -> &'a StreamMessage {
        <StreamMessage as ::protobuf::Message>::default_instance()
    }
}

impl StreamMessage {
    pub fn new() -> StreamMessage {
        ::std::default::Default::default()
    }

    // .zensayyy.fm.proto.StreamUpdateSummary updateSummary = 2;

    pub fn updateSummary(&self) -> &StreamUpdateSummary {
        match self.message {
            ::std::option::Option::Some(stream_message::Message::UpdateSummary(ref v)) => v,
            _ => <StreamUpdateSummary as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_updateSummary(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_updateSummary(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(stream_message::Message::UpdateSummary(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_updateSummary(&mut self, v: StreamUpdateSummary) {
        self.message = ::std::option::Option::Some(stream_message::Message::UpdateSummary(v))
    }

    // Mutable pointer to the field.
    pub fn mut_updateSummary(&mut self) -> &mut StreamUpdateSummary {
        if let ::std::option::Option::Some(stream_message::Message::UpdateSummary(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(stream_message::Message::UpdateSummary(StreamUpdateSummary::new()));
        }
        match self.message {
            ::std::option::Option::Some(stream_message::Message::UpdateSummary(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_updateSummary(&mut self) -> StreamUpdateSummary {
        if self.has_updateSummary() {
            match self.message.take() {
                ::std::option::Option::Some(stream_message::Message::UpdateSummary(v)) => v,
                _ => panic!(),
            }
        } else {
            StreamUpdateSummary::new()
        }
    }

    // .zensayyy.fm.proto.StreamUpdate update = 3;

    pub fn update(&self) -> &StreamUpdate {
        match self.message {
            ::std::option::Option::Some(stream_message::Message::Update(ref v)) => v,
            _ => <StreamUpdate as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_update(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(stream_message::Message::Update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: StreamUpdate) {
        self.message = ::std::option::Option::Some(stream_message::Message::Update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update(&mut self) -> &mut StreamUpdate {
        if let ::std::option::Option::Some(stream_message::Message::Update(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(stream_message::Message::Update(StreamUpdate::new()));
        }
        match self.message {
            ::std::option::Option::Some(stream_message::Message::Update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update(&mut self) -> StreamUpdate {
        if self.has_update() {
            match self.message.take() {
                ::std::option::Option::Some(stream_message::Message::Update(v)) => v,
                _ => panic!(),
            }
        } else {
            StreamUpdate::new()
        }
    }

    // .zensayyy.fm.proto.StreamJoin join = 4;

    pub fn join(&self) -> &StreamJoin {
        match self.message {
            ::std::option::Option::Some(stream_message::Message::Join(ref v)) => v,
            _ => <StreamJoin as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_join(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_join(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(stream_message::Message::Join(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_join(&mut self, v: StreamJoin) {
        self.message = ::std::option::Option::Some(stream_message::Message::Join(v))
    }

    // Mutable pointer to the field.
    pub fn mut_join(&mut self) -> &mut StreamJoin {
        if let ::std::option::Option::Some(stream_message::Message::Join(_)) = self.message {
        } else {
            self.message = ::std::option::Option::Some(stream_message::Message::Join(StreamJoin::new()));
        }
        match self.message {
            ::std::option::Option::Some(stream_message::Message::Join(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_join(&mut self) -> StreamJoin {
        if self.has_join() {
            match self.message.take() {
                ::std::option::Option::Some(stream_message::Message::Join(v)) => v,
                _ => panic!(),
            }
        } else {
            StreamJoin::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "action",
            |m: &StreamMessage| { &m.action },
            |m: &mut StreamMessage| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StreamUpdateSummary>(
            "updateSummary",
            StreamMessage::has_updateSummary,
            StreamMessage::updateSummary,
            StreamMessage::mut_updateSummary,
            StreamMessage::set_updateSummary,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StreamUpdate>(
            "update",
            StreamMessage::has_update,
            StreamMessage::update,
            StreamMessage::mut_update,
            StreamMessage::set_update,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, StreamJoin>(
            "join",
            StreamMessage::has_join,
            StreamMessage::join,
            StreamMessage::mut_join,
            StreamMessage::set_join,
        ));
        oneofs.push(stream_message::Message::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StreamMessage>(
            "StreamMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StreamMessage {
    const NAME: &'static str = "StreamMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.action = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.message = ::std::option::Option::Some(stream_message::Message::UpdateSummary(is.read_message()?));
                },
                26 => {
                    self.message = ::std::option::Option::Some(stream_message::Message::Update(is.read_message()?));
                },
                34 => {
                    self.message = ::std::option::Option::Some(stream_message::Message::Join(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.action != ::protobuf::EnumOrUnknown::new(StreamAction::ADD) {
            my_size += ::protobuf::rt::int32_size(1, self.action.value());
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &stream_message::Message::UpdateSummary(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &stream_message::Message::Update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &stream_message::Message::Join(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.action != ::protobuf::EnumOrUnknown::new(StreamAction::ADD) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.action))?;
        }
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &stream_message::Message::UpdateSummary(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &stream_message::Message::Update(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &stream_message::Message::Join(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StreamMessage {
        StreamMessage::new()
    }

    fn clear(&mut self) {
        self.action = ::protobuf::EnumOrUnknown::new(StreamAction::ADD);
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StreamMessage {
        static instance: StreamMessage = StreamMessage {
            action: ::protobuf::EnumOrUnknown::from_i32(0),
            message: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StreamMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StreamMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StreamMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `StreamMessage`
pub mod stream_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:zensayyy.fm.proto.StreamMessage.message)
    pub enum Message {
        // @@protoc_insertion_point(oneof_field:zensayyy.fm.proto.StreamMessage.updateSummary)
        UpdateSummary(super::StreamUpdateSummary),
        // @@protoc_insertion_point(oneof_field:zensayyy.fm.proto.StreamMessage.update)
        Update(super::StreamUpdate),
        // @@protoc_insertion_point(oneof_field:zensayyy.fm.proto.StreamMessage.join)
        Join(super::StreamJoin),
    }

    impl ::protobuf::Oneof for Message {
    }

    impl ::protobuf::OneofFull for Message {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::StreamMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("message").unwrap()).clone()
        }
    }

    impl Message {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Message>("message")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:zensayyy.fm.proto.StreamAction)
pub enum StreamAction {
    // @@protoc_insertion_point(enum_value:zensayyy.fm.proto.StreamAction.ADD)
    ADD = 0,
    // @@protoc_insertion_point(enum_value:zensayyy.fm.proto.StreamAction.FRESH)
    FRESH = 1,
}

impl ::protobuf::Enum for StreamAction {
    const NAME: &'static str = "StreamAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StreamAction> {
        match value {
            0 => ::std::option::Option::Some(StreamAction::ADD),
            1 => ::std::option::Option::Some(StreamAction::FRESH),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [StreamAction] = &[
        StreamAction::ADD,
        StreamAction::FRESH,
    ];
}

impl ::protobuf::EnumFull for StreamAction {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("StreamAction").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for StreamAction {
    fn default() -> Self {
        StreamAction::ADD
    }
}

impl StreamAction {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<StreamAction>("StreamAction")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15protocol/Stream.proto\x12\x11zensayyy.fm.proto\x1a\x1fgoogle/proto\
    buf/timestamp.proto\"v\n\x0cClipMetadata\x12\x10\n\x03src\x18\x01\x20\
    \x01(\tR\x03src\x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05title\x12\x20\
    \n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x12\x1c\n\tthumbnai\
    l\x18\x04\x20\x01(\tR\tthumbnail\"{\n\x0cStreamUpdate\x12;\n\x08upcoming\
    \x18\x02\x20\x01(\x0b2\x1f.zensayyy.fm.proto.ClipMetadataR\x08upcoming\
    \x12.\n\x04time\x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x04\
    time\"P\n\x13StreamUpdateSummary\x129\n\x07updates\x18\x02\x20\x03(\x0b2\
    \x1f.zensayyy.fm.proto.StreamUpdateR\x07updates\"(\n\nStreamJoin\x12\x1a\
    \n\x08streamId\x18\x01\x20\x01(\tR\x08streamId\"\x93\x02\n\rStreamMessag\
    e\x127\n\x06action\x18\x01\x20\x01(\x0e2\x1f.zensayyy.fm.proto.StreamAct\
    ionR\x06action\x12N\n\rupdateSummary\x18\x02\x20\x01(\x0b2&.zensayyy.fm.\
    proto.StreamUpdateSummaryH\0R\rupdateSummary\x129\n\x06update\x18\x03\
    \x20\x01(\x0b2\x1f.zensayyy.fm.proto.StreamUpdateH\0R\x06update\x123\n\
    \x04join\x18\x04\x20\x01(\x0b2\x1d.zensayyy.fm.proto.StreamJoinH\0R\x04j\
    oinB\t\n\x07message*\"\n\x0cStreamAction\x12\x07\n\x03ADD\x10\0\x12\t\n\
    \x05FRESH\x10\x01J\xe7\x08\n\x06\x12\x04\0\0%\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x01\0)\n\x08\n\x01\x02\x12\x03\x02\
    \0\x1a\n\n\n\x02\x05\0\x12\x04\x04\0\x07\x01\n\n\n\x03\x05\0\x01\x12\x03\
    \x04\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x02\n\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03\x05\x02\x05\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x05\
    \x08\t\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x02\x0c\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x06\x02\x07\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\
    \x06\n\x0b\n\n\n\x02\x04\0\x12\x04\t\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\t\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02\x11\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\t\
    \x0c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x0f\x10\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x0b\x02\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0b\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\
    \x02\x19\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x0c\t\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x0c\x17\x18\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x02\x17\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\r\t\x12\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r\x15\x16\n\n\n\x02\
    \x04\x01\x12\x04\x10\0\x13\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08\x14\
    \n>\n\x04\x04\x01\x02\0\x12\x03\x11\x02\x1c\"1\x20next\x20upcoming\x20cl\
    ip,\x20first\x20one\x20is\x20the\x20active\x20one\n\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03\x11\x02\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x11\
    \x0f\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x11\x1a\x1b\n*\n\x04\x04\
    \x01\x02\x01\x12\x03\x12\x02%\"\x1d\x20timestamp\x20from\x20server\x20(?\
    ??)\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x12\x02\x1b\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03\x12\x1c\x20\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03\x12#$\n\n\n\x02\x04\x02\x12\x04\x15\0\x17\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x15\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x16\x02$\n\
    \x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x16\x02\n\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x03\x16\x0b\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x16\x18\
    \x1f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x16\"#\nX\n\x02\x04\x03\x12\
    \x04\x1a\0\x1c\x01\x1aL\x20sent\x20by\x20the\x20browser\x20/\x20app\x20t\
    o\x20the\x20server\x20to\x20join\x20a\x20stream\x20(receive\x20updates)\
    \n\n\n\n\x03\x04\x03\x01\x12\x03\x1a\x08\x12\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x1b\x02\x16\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1b\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1b\t\x11\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x1b\x14\x15\n\n\n\x02\x04\x04\x12\x04\x1e\0%\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03\x1e\x08\x15\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1f\
    \x02\x1a\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x1f\x02\x0e\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03\x1f\x0f\x15\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03\x1f\x18\x19\n\x0c\n\x04\x04\x04\x08\0\x12\x04\x20\x02$\x03\n\x0c\n\
    \x05\x04\x04\x08\0\x01\x12\x03\x20\x08\x0f\n\x0b\n\x04\x04\x04\x02\x01\
    \x12\x03!\x04*\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03!\x04\x17\n\x0c\n\
    \x05\x04\x04\x02\x01\x01\x12\x03!\x18%\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03!()\n\x0b\n\x04\x04\x04\x02\x02\x12\x03\"\x04\x1c\n\x0c\n\x05\
    \x04\x04\x02\x02\x06\x12\x03\"\x04\x10\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03\"\x11\x17\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03\"\x1a\x1b\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x03#\x04\x18\n\x0c\n\x05\x04\x04\x02\x03\
    \x06\x12\x03#\x04\x0e\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03#\x0f\x13\n\
    \x0c\n\x05\x04\x04\x02\x03\x03\x12\x03#\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ClipMetadata::generated_message_descriptor_data());
            messages.push(StreamUpdate::generated_message_descriptor_data());
            messages.push(StreamUpdateSummary::generated_message_descriptor_data());
            messages.push(StreamJoin::generated_message_descriptor_data());
            messages.push(StreamMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(StreamAction::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
